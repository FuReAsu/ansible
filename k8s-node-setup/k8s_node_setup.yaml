- name: K8S Prerequisites - NTP, SE, and Firewall
  hosts: k8s_nodes
  become: true
  tasks:
    - name: Disable SELINUX and install Chrony on RedHat like nodes
      when: ansible_facts["os_family"] == "RedHat"

      handlers:
        - name: Restart chronyd
          ansible.builtin.service:
            name: chronyd
            state: restarted

      block:
        - name: Disable Selinux
          ansible.posix.selinux:
            state: disabled

        - name: Disable Selinux (Persistent)
          ansible.builtin.lineinfile:
            path: /etc/selinux/config
            search_string: "SELINUX=enforcing"
            line: "SELINUX=permissive"

        - name: Install Chrony on RedHat like hosts
          ansible.builtin.dnf:
            name: chrony
            state: present

        - name: Start and enable Chrony Service on RedHat like nodes
          ansible.builtin.service:
            name: chronyd
            state: started
            enabled: true

        - name: Add ntp server address on RedHat like nodes
          ansible.builtin.lineinfile:
            path: /etc/chrony.conf
            search_string: "server"
            line: "server {{ ntp_server }} iburst"
          notify: Restart chronyd

    - name: Install Chrony on Debian like nodes
      when: ansible_facts["os_family"] == "Debian"
      block:
        - name: Install Chrony on Debian like hosts
          ansible.builtin.apt:
            name: chrony
            state: present

        - name: Start and enable Chrony Service on Debian like nodes
          ansible.builtin.service:
            name: chronyd
            state: started
            enabled: true

        - name: Add ntp server address on Debian like nodes
          when: ansible_facts["os_family"] == "Debian"
          ansible.builtin.lineinfile:
            path: /etc/chrony/chrony.conf
            search_string: "server"
            line: "server {{ ntp_server }} iburst"
          notify: Restart chronyd

    - name: Disable firewall on RedHat like nodes
      when: ansible_facts["os_family"] == "RedHat"
      ansible.builtin.service:
        name: firewalld
        state: stopped
        enabled: false

    - name: Disable firewall on Debian like nodes
      when: ansible_facts["os_family"] == "Debian"
      block:
        - name: Check if ufw exists
          ansible.builtin.package_facts:
            manager: apt

        - name: Disable firewall on Debian like nodes
          when: "'ufw' in ansible_facts.packages"
          community.general.ufw:
            state: disabled

    - name: Disable swap on all nodes
      when: ansible_swaptotal_mb > 0
      ansible.builtin.command: swapoff -a
      changed_when: true

    - name: Comment swap from fstab (Persistent) on all nodes
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*\bswap\b.*)$'
        replace: '# \1'
        backup: true

- name: K8S Prerequisites Kernel Modules and System Config
  hosts: k8s_nodes
  become: true
  tasks:
    - name: Load Kernel Modules on all nodes
      community.general.modprobe:
        name: "{{ item }}"
        state: present
        persistent: present
      loop: "{{ kernel_modules_to_load }}"

    - name: Load Sysctl Configurations on all nodes
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: true
      loop: "{{ sysctl_configurations | dict2items }}"

- name: K8S Installation
  hosts: k8s_nodes
  become: true
  tasks:
    - name: Check if K8S repo already exists on RedHat like nodes
      ansible.builtin.stat:
        path: /etc/yum.repos.d/k8s.repo
      register: k8s_repo_file

    - name: Check if CRIO repo already exists on RedHat like nodes
      ansible.builtin.stat:
        path: /etc/yum.repos.d/crio.repo
      register: crio_repo_file

    - name: Add K8S and CRIO repo on RedHat like nodes
      when: ansible_facts["os_family"] == "RedHat"
      block:
        - name: Add K8S repo on RedHat like nodes
          when: not k8s_repo_file.stat.exists
          ansible.builtin.yum_repository:
            name: k8s
            description: kubernetes repository
            baseurl: https://pkgs.k8s.io/core:/stable:/{{ k8s_ver }}/rpm/
            gpgcheck: true
            gpgkey: https://pkgs.k8s.io/core:/stable:/{{ k8s_ver }}/rpm/repodata/repomd.xml.key

        - name: Add CRIO repo on RedHat like nodes
          when: not crio_repo_file.stat.exists
          ansible.builtin.yum_repository:
            name: crio
            description: crio repository
            baseurl: https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_ver }}/rpm/
            gpgcheck: true
            gpgkey: https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_ver }}/rpm/repodata/repomd.xml.key

        - name: Update dnf cache on RedHat like nodes
          ansible.builtin.dnf:
            update_cache: true

    - name: Add K8S and CRIO repo on Debian like nodes
      when: ansible_facts["os_family"] == "Debian"
      block:
        - name: Get K8S repo gpg key on Debian like nodes
          ansible.builtin.get_url:
            url: https://pkgs.k8s.io/core:/stable:/{{ k8s_ver }}/deb/Release.key
            dest: /tmp/k8s-apt-keyring.key
            mode: "644"
          register: get_k8s_repo_key

        - name: Add K8S repo gpg key on Debian like nodes
          when: get_k8s_repo_key is succeeded
          ansible.builtin.shell: |
            gpg --dearmor -o /etc/apt/keyrings/k8s-apt-keyring.gpg /tmp/k8s-apt-keyring.key
          args:
            creates: /etc/apt/keyrings/k8s-apt-keyring.gpg
          changed_when: false

        - name: Add K8S repo on Debian like nodes
          ansible.builtin.apt_repository:
            repo: deb [signed-by=/etc/apt/keyrings/k8s-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ k8s_ver }}/deb/ /
            state: present
            filename: k8s
          register: k8s_repo_added

        - name: Get CRIO repo gpg key on Debian like nodes
          ansible.builtin.get_url:
            url: https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_ver }}/deb/Release.key
            dest: /tmp/crio-apt-keyring.key
            mode: "644"
          register: get_crio_repo_key

        - name: Add CRIO repo key on Debian like nodes
          when: get_crio_repo_key is succeeded
          ansible.builtin.shell: |
            gpg --dearmor -o /etc/apt/keyrings/crio-apt-keyring.gpg /tmp/crio-apt-keyring.key
          args:
            creates: /etc/apt/keyrings/crio-apt-keyring.gpg
          changed_when: false

        - name: Add CRIO repo on Debian like nodes
          ansible.builtin.apt_repository:
            repo: deb [signed-by=/etc/apt/keyrings/crio-apt-keyring.gpg] https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_ver }}/deb/ /
            state: present
            filename: crio
          register: crio_repo_added

        - name: Update apt cache on Debian like nodes
          when: k8s_repo_added is changed or crio_repo_added is changed
          ansible.builtin.apt:
            update_cache: true

    - name: Install CRIO and K8S on RedHat like nodes
      when: ansible_facts["os_family"] == "RedHat"
      block:
        - name: Install CRIO on RedHat like nodes
          ansible.builtin.dnf:
            name: cri-o
            state: present
          register: crio_install

        - name: Exclude CRIO package from updates on RedHat like nodes
          when: crio_install is succeeded
          community.general.ini_file:
            path: /etc/yum.repos.d/crio.repo
            section: crio
            option: exclude
            value: cri-o
            mode: "644"

        - name: Start and enable CRIO on RedHat like nodes
          when: crio_install is succeeded
          ansible.builtin.service:
            name: crio
            state: started
            enabled: true

        - name: Install K8S components on RedHat like nodes
          ansible.builtin.dnf:
            name:
              - kubectl
              - kubeadm
              - kubelet
            state: present
          register: k8s_components_install

        - name: Exclude K8S components packages from updates on RedHat like nodes
          when: k8s_components_install is succeeded
          community.general.ini_file:
            path: /etc/yum.repos.d/k8s.repo
            section: k8s
            option: exclude
            value: kubeadm kubelet kubectl cri-tools
            mode: "644"

        - name: Start and enable Kubelet on RedHat like nodes
          when: k8s_components_install is succeeded
          ansible.builtin.service:
            name: kubelet
            state: started
            enabled: true

    - name: Install CRIO and K8S on Debian like nodes
      when: ansible_facts["os_family"] == "Debian"
      block:
        - name: Install CRIO on Debian like nodes
          ansible.builtin.apt:
            name: cri-o
            state: present
          register: crio_install

        - name: Exclude CRIO from updates on Debian like nodes
          ansible.builtin.dpkg_selections:
            name: cri-o
            selection: hold

        - name: Start and enable CRIO on Debian like nodes
          when: crio_install is succeeded
          ansible.builtin.service:
            name: crio
            state: started
            enabled: true

        - name: Install K8S Components on Debian like nodes
          ansible.builtin.apt:
            name:
              - kubectl
              - kubeadm
              - kubelet
              - cri-tools
            state: present
          register: k8s_components_install

        - name: Exclude K8S Components from updates on Debian like nodes
          when: k8s_components_install is succeeded
          ansible.builtin.dpkg_selections:
            name: "{{ item }}"
            selection: hold
          loop:
            - kubectl
            - kubeadm
            - kubelet
            - cri-tools

        - name: Start and enable kubelet on Debian like nodes
          when: k8s_components_install is succeeded
          ansible.builtin.service:
            name: kubelet
            state: started
            enabled: true

